{View} = require 'atom'

module.exports =
class ProtonView extends View
  @content: ->
    @div class: 'test overlay from-top', =>
      @div "The Test package is Alive! It's ALIVE!", class: "message"

  initialize: (serializeState) ->
    atom.workspaceView.command "proton-gist:public", => @create(true)
    atom.workspaceView.command "proton-gist:private", => @create(false)

  # Returns an object that can be retrieved when package is activated
  serialize: ->

  # Tear down any state and detach
  destroy: ->
    @detach()

  create: ->
    request = new XMLHttpRequest()
    response = null;
    url = 'https://api.github.com/gists'
    editor = atom.workspace.activePaneItem;
    content = editor.getSelectedText() ||Â editor.buffer.cachedText;
    token = atom.config.get('protonGist.githubToken')

    data:
      "description": ""
      # "description": "Generated by proton-gist http://github.com/ankr/proton-gist"
      "public": isPublic
      "files": {}
    data.files[editor.getTitle()] = {
      "content": content
    }

    request.onreadystatechange = ->
      if request.readyState === 4
        if request.status !== 201
          alert('Something went wrong when creating gist - check console (Cmd-alt-i)!')
          console.log(request)
          return;

        response = JSON.parse(request.responseText)

        # Add text to document and cut it out - hack to get it into clipboard
        editor.moveCursorToBottom()
        editor.insertText('\n' + response.html_url)
        editor.moveCursorToBeginningOfLine()
        editor.cutToEndOfLine()
        editor.deleteLine()

        alert('Gist created - url is in your clipboard!')

    # if @hasParent()
    #   @detach()
    # else
    atom.workspaceView.append(this)
